#include <bits/stdc++.h> 

void update(int node,int l,int r,int low,int high,vector<long long>&seg,vector<long long>&lazy)

{

    if(r<l)return;

    if(lazy[node]!=0)

    {

        seg[node]+=lazy[node];

        if(low!=high)

        {

            lazy[2*node+1]+=lazy[node];

            lazy[2*node+2]+=lazy[node];

        }

        lazy[node]=0;

    }

    if(low>=l&&high<=r)

    {

        seg[node]+=1;

        

        if(low!=high)

        {

            lazy[2*node+1]+=1;

            lazy[2*node+2]+=1;

        }

        return;

    }

    if(r<low||l>high)return;

    int mid=low+(high-low)/2;

    update(2*node+1,l,r,low,mid,seg,lazy);

    update(2*node+2,l,r,mid+1,high,seg,lazy);

    seg[node]=seg[2*node+1]+seg[2*node+2];

}

int query(int node,int l,int r,int low,int high,vector<long long>&seg,vector<long long>&lazy)

{

    if(r<l)return 0;

    if(lazy[node]!=0)

    {

        seg[node]+=lazy[node];

        if(low!=high)

        {

            lazy[2*node+1]+=lazy[node];

            lazy[2*node+2]+=lazy[node];

        }

        lazy[node]=0;

    }

    if(low>=l&&high<=r)return seg[node];

    if(r<low||l>high)return 0;

    int mid=low+(high-low)/2;

    int left=query(2*node+1,l,r,low,mid,seg,lazy);

    int right=query(2*node+2,l,r,mid+1,high,seg,lazy);

    return left+right;

}

long long getInversions(long long *arr, int n){

    map<long long,int>m;

    for(int i=0;i<n;i++)

    {

        m[arr[i]]=1;

    }

    vector<long long>arr_temp(n);

    for(int i=0;i<n;i++)

    {

        arr_temp[i]=arr[i];

    }

    /*compressing*/

    map<long long,int>mb;

    int count=0;

    for(auto val:m)

    {

        mb[val.first]=count;

        count++;

    }

    vector<long long>seg(4*count+1,0);

    vector<long long>lazy(4*count+1,0);

    for(int i=0;i<n;i++)

    {

        int val=mb[arr_temp[i]];

        arr_temp[i]=val;

    }

    int last=0;

    int ans=0;

    for(int i=1;i<n;i++)

    {

       for(int j=last;j<i;j++)

       {

           long long val=arr_temp[j];

           if(val==0)continue;

           update(0,0,val-1,0,count,seg,lazy);

       }

       last=i;

       ans+=query(0,arr_temp[i],arr_temp[i],0,count,seg,lazy);

    }

    return ans;

}
